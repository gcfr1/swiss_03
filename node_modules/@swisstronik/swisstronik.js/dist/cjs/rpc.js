"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodePublicKey = void 0;
const axios_1 = __importDefault(require("axios"));
function getNodePublicKey(rpcEndpoint, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let blockNumOrHash = 'latest';
        if (options) {
            if (options.blockHash) {
                blockNumOrHash = options.blockHash;
            }
            if (options.blockNumber) {
                blockNumOrHash = options.blockNumber;
            }
        }
        const requestData = {
            id: 1,
            jsonrpc: '2.0',
            method: 'eth_getNodePublicKey',
            params: [blockNumOrHash],
        };
        try {
            const { data } = yield axios_1.default.post(rpcEndpoint, requestData);
            if (!data.result) {
                throw new Error('corrupted response');
            }
            return { publicKey: data.result };
        }
        catch (err) {
            if (axios_1.default.isAxiosError(err)) {
                return { error: err.message };
            }
            else {
                return {
                    error: `Cannot get node public key: an unexpected error occurred: ${err}`,
                };
            }
        }
    });
}
exports.getNodePublicKey = getNodePublicKey;
